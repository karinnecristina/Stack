version: '3.8'

services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - lakehouse_network

  minio-mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      - minio
    entrypoint: |
      sh -c "
      sleep 10 &&
      mc alias set myminio http://minio:9000 $MINIO_USER $MINIO_PASSWORD &&
      mc mb myminio/silver &&
      mc mb myminio/gold
      "
    networks:
      - lakehouse_network

  trino-coordinator:
    container_name: trino
    image: trinodb/trino:468
    hostname: trino-coordinator
    ports:
      - 8085:8080
    depends_on:
      - minio-mc
    volumes:
      - ./src/trino/etc:/etc/trino
    environment:
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
    networks:
      - lakehouse_network

  trino-worker:
    image: trinodb/trino:468
    container_name: trino-worker
    hostname: trino-worker
    depends_on:
      - trino-coordinator
    volumes:
      - ./src/trino/etc:/etc/trino
    environment:
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
    networks:
      - lakehouse_network

  trino-init:
    image: trinodb/trino:468
    container_name: trino-init
    hostname: trino-init
    depends_on:
      - trino-coordinator
    entrypoint: [ "/bin/sh", "-c", "sleep 30 && trino --server trino-coordinator:8080 -f /docker-entrypoint-initdb.d/create_schemas.sql" ]
    volumes:
      - ./src/trino/init_trino/create_schemas.sql:/docker-entrypoint-initdb.d/create_schemas.sql
    networks:
      - lakehouse_network

  mariadb:
    container_name: mariadb
    hostname: metastore_db
    image: mariadb:10.5.8
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: metastore_db
    networks:
      - lakehouse_network

  hive-metastore:
    container_name: hive-metastore
    hostname: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    ports:
      - 9083:9083 # Metastore Thrift
    volumes:
      - ./src/hive/config/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
      HIVE_METASTORE_DRIVER: org.mariadb.jdbc.Driver
    depends_on:
      - mariadb
    networks:
      - lakehouse_network

  # Airflow common service
  x-airflow-common:
    &airflow-common
    image: airflow
    container_name: airflow
    hostname: airflow
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
      AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    volumes:
      - ${AIRFLOW_PROJ_DIR:-/home/karinne/stack/Genesis/Lakehouse/src/airflow}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-/home/karinne/stack/Genesis/Lakehouse/src/airflow}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-/home/karinne/stack/Genesis/Lakehouse/src/airflow}/plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      &airflow-common-depends-on
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - lakehouse_network

  postgres:
    image: postgres:13
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - lakehouse_network

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    hostname: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - lakehouse_network

  # Spark services
  spark-master:
    image: bitnami/spark:3.5.4
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_METRICS_MASTER_ENABLED=true
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    networks:
      - lakehouse_network
    volumes:
      - ../mnt/spark_job:/spark_job/
    ports:
      - "9090:8080"
      - "7077:7077"
      - '18080:8080'

  spark-worker:
    image: bitnami/spark:3.5.4
    hostname: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    networks:
      - lakehouse_network
    deploy:
      replicas: 2

networks:
  lakehouse_network:
    name: lakehouse_network

volumes:
  postgres-db-volume:
  minio-data:
